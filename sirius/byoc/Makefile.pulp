# General settings
BUILD_DIR := build
MODEL := model

# Compiler options
PKG_COMPILE_OPTS = -Wall -pedantic -O0 -std=gnu99
PULP_COMPILE_OPTS = -DSDK
# For debug support - comment these out for reduced binary size
PKG_COMPILE_OPTS += -g
PULP_COMPILE_OPTS += -DSOMA_AUTO_DEBUG

# Include paths
STANDALONE_CRT_PATH := $(abspath $(BUILD_DIR))/runtime
CODEGEN_PATH := $(abspath $(BUILD_DIR))/codegen

# Sources
CODEGEN_SRCS = $(wildcard $(abspath $(BUILD_DIR))/codegen/host/src/*.c)
CODEGEN_OBJS = $(subst .c,.o,$(CODEGEN_SRCS))

SOMA_LIB_PATH = /esat/sol1/users/jvandelm/diana-proper/diana-toplevel/sirius-high-level-library
SOMA_SRCS = $(wildcard $(SOMA_LIB_PATH)/src/*.c)
SOMA_OBJS = $(subst .c,.o,$(SOMA_SRCS))

# Compiler selection
# PULP_RISCV_GCC_TOOLCHAIN is set by sourcing sourceme.sh in toplevel repo
CC = $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-gcc
AR = $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-ar
RANLIB = $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-ranlib

# These were taken out of __flags.mk with default settings
PULP_FC_ARCH_CFLAGS ?=  -march=rv32imfcxpulpv2 \
						-mfdiv \
						-D__riscv__
PULP_FC_CFLAGS    += -fdata-sections \
					 -ffunction-sections \
					 -I/users/micas/jvandelm/onsol/diana-proper/diana-toplevel/diana-rtl/pulp-sdk-diana/pkg/sdk/dev/install/include/io \
					 -I/users/micas/jvandelm/onsol/diana-proper/diana-toplevel/diana-rtl/pulp-sdk-diana/pkg/sdk/dev/install/include \
					 -include $(abspath build/pulpissimo/fc_config.h)
PULP_FC_OMP_CFLAGS    += -fopenmp -mnativeomp

PULP_FC_CC = $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-gcc 
PULP_CC = $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-gcc 
PULP_AR ?= $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-ar
PULP_LD ?= $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-gcc
PULP_FC_OBJDUMP ?= $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-objdump
PULP_OBJDUMP ?= $(PULP_RISCV_GCC_TOOLCHAIN)/bin/riscv32-unknown-elf-objdump

PULP_ARCH_FC_OBJDFLAGS ?= -Mmarch=rv32imfcxpulpv2
PULP_ARCH_OBJDFLAGS ?= -Mmarch=rv32imfcxpulpv2
PULP_ARCH_LDFLAGS ?=  -march=rv32imfcxpulpv2 -mfdiv -D__riscv__
PULP_LDFLAGS_demo = -nostartfiles \
					-nostdlib \
				   	-Wl,--gc-sections \
					-L/users/micas/jvandelm/onsol/diana-proper/diana-toplevel/diana-rtl/pulp-sdk-diana/pkg/sdk/dev/install/rules \
				   	-L/users/micas/jvandelm/onsol/diana-proper/diana-toplevel/diana-rtl/pulp-sdk-diana/pkg/sdk/dev/install/lib/pulpissimo \
				   	-L/users/micas/jvandelm/onsol/diana-proper/diana-toplevel/diana-rtl/pulp-sdk-diana/pkg/sdk/dev/install/lib/pulpissimo/pulpissimo \
					-lrt \
					-lrtio \
					-lrt \
					-lgcc \
					-Tpulpissimo/link.ld

PULP_OMP_LDFLAGS_demo = -lomp

pulpRunOpt        += --dir=build/pulpissimo --binary=demo/demo
# End of what comes out of __flags.mk

PULP_COMPILE_OPTS += $(PULP_FC_ARCH_CFLAGS) $(PULP_FC_CFLAGS)
# Compiler options and header includes
PKG_CFLAGS = ${PKG_COMPILE_OPTS}\
	     ${PULP_COMPILE_OPTS}\
	     -I${STANDALONE_CRT_PATH}/include \
	     -I${STANDALONE_CRT_PATH}/src/runtime/crt/include \
	     -I${CODEGEN_PATH}/host/include \
	     -I${PWD}/include \
         -I${SOMA_LIB_PATH}/include

# These targets don't make self-titled files
.PHONY: all compile clean

all: compile $(BUILD_DIR)/stack_allocator.o $(BUILD_DIR)/crt_backend_api.o  $(BUILD_DIR)/libcodegen.a $(BUILD_DIR)/demo

$(BUILD_DIR)/stack_allocator.o: $(STANDALONE_CRT_PATH)/src/runtime/crt/memory/stack_allocator.c
	mkdir -p $(@D)
	$(CC) -c $(PKG_CFLAGS) -o $@ $^

$(BUILD_DIR)/crt_backend_api.o: $(STANDALONE_CRT_PATH)/src/runtime/crt/common/crt_backend_api.c
	mkdir -p $(@D)
	$(CC) -c $(PKG_CFLAGS) -o $@ $^

$(BUILD_DIR)/libcodegen.a: $(CODEGEN_SRCS)
	cd $(abspath $(BUILD_DIR)/codegen/host/src) && $(CC) -c $(PKG_CFLAGS) $(CODEGEN_SRCS)
	$(AR) -cr $(abspath $(BUILD_DIR)/libcodegen.a) $(CODEGEN_OBJS)
	$(RANLIB) $(abspath $(BUILD_DIR)/libcodegen.a)

$(BUILD_DIR)/demo: $(PWD)/src/demo.c $(BUILD_DIR)/stack_allocator.o $(BUILD_DIR)/crt_backend_api.o $(BUILD_DIR)/libcodegen.a $(SOMA_SRCS)
	mkdir -p $(@D)
	$(CC) $(PKG_CFLAGS) $(PULP_LDFLAGS_demo) -o  $@ $^ --verbose --save-temps


compile:clean
	# Create model.tar for int8 sum
	python soma_codegen.py
	# Create build directory and move and unpack model mlf there
	mkdir -p $(BUILD_DIR)
	mv $(MODEL).tar $(BUILD_DIR)
	tar -xf $(BUILD_DIR)/$(MODEL).tar --directory=$(BUILD_DIR)
	rm $(BUILD_DIR)/$(MODEL).tar
	# Re-evaluate the codegen sources after creating the files
	#$(eval $(call RE_EVALUATE,${BUILD_DIR/codegen/host/src/*.c}))
	#echo $(CODEGEN_SRCS)
	#echo $(CODEGEN_OBJS)


clean:
	rm -rf $(BUILD_DIR) 


